// Generated by view binder compiler. Do not edit!
package com.example.autopunchapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TimePicker;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.autopunchapp.R;
import com.google.android.material.switchmaterial.SwitchMaterial;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTimeSettingBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnCancelSetting;

  @NonNull
  public final Button btnConfirmSetting;

  @NonNull
  public final EditText etMaxInterval;

  @NonNull
  public final EditText etMinInterval;

  @NonNull
  public final SwitchMaterial switchRandomPunch;

  @NonNull
  public final TimePicker timePickerEnd;

  @NonNull
  public final TimePicker timePickerStart;

  private FragmentTimeSettingBinding(@NonNull LinearLayout rootView,
      @NonNull Button btnCancelSetting, @NonNull Button btnConfirmSetting,
      @NonNull EditText etMaxInterval, @NonNull EditText etMinInterval,
      @NonNull SwitchMaterial switchRandomPunch, @NonNull TimePicker timePickerEnd,
      @NonNull TimePicker timePickerStart) {
    this.rootView = rootView;
    this.btnCancelSetting = btnCancelSetting;
    this.btnConfirmSetting = btnConfirmSetting;
    this.etMaxInterval = etMaxInterval;
    this.etMinInterval = etMinInterval;
    this.switchRandomPunch = switchRandomPunch;
    this.timePickerEnd = timePickerEnd;
    this.timePickerStart = timePickerStart;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTimeSettingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTimeSettingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_time_setting, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTimeSettingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_cancel_setting;
      Button btnCancelSetting = ViewBindings.findChildViewById(rootView, id);
      if (btnCancelSetting == null) {
        break missingId;
      }

      id = R.id.btn_confirm_setting;
      Button btnConfirmSetting = ViewBindings.findChildViewById(rootView, id);
      if (btnConfirmSetting == null) {
        break missingId;
      }

      id = R.id.et_max_interval;
      EditText etMaxInterval = ViewBindings.findChildViewById(rootView, id);
      if (etMaxInterval == null) {
        break missingId;
      }

      id = R.id.et_min_interval;
      EditText etMinInterval = ViewBindings.findChildViewById(rootView, id);
      if (etMinInterval == null) {
        break missingId;
      }

      id = R.id.switch_random_punch;
      SwitchMaterial switchRandomPunch = ViewBindings.findChildViewById(rootView, id);
      if (switchRandomPunch == null) {
        break missingId;
      }

      id = R.id.time_picker_end;
      TimePicker timePickerEnd = ViewBindings.findChildViewById(rootView, id);
      if (timePickerEnd == null) {
        break missingId;
      }

      id = R.id.time_picker_start;
      TimePicker timePickerStart = ViewBindings.findChildViewById(rootView, id);
      if (timePickerStart == null) {
        break missingId;
      }

      return new FragmentTimeSettingBinding((LinearLayout) rootView, btnCancelSetting,
          btnConfirmSetting, etMaxInterval, etMinInterval, switchRandomPunch, timePickerEnd,
          timePickerStart);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
