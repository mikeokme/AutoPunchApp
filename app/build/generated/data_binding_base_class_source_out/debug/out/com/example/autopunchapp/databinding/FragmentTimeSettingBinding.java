// Generated by view binder compiler. Do not edit!
package com.example.autopunchapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ScrollView;
import android.widget.TimePicker;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.autopunchapp.R;
import com.google.android.material.switchmaterial.SwitchMaterial;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTimeSettingBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Button btnCancelSetting;

  @NonNull
  public final Button btnConfirmSetting;

  @NonNull
  public final EditText etOffMaxInterval;

  @NonNull
  public final EditText etOffMinInterval;

  @NonNull
  public final EditText etWorkMaxInterval;

  @NonNull
  public final EditText etWorkMinInterval;

  @NonNull
  public final SwitchMaterial switchOffRandomPunch;

  @NonNull
  public final SwitchMaterial switchWorkRandomPunch;

  @NonNull
  public final TimePicker timePickerOffEnd;

  @NonNull
  public final TimePicker timePickerOffStart;

  @NonNull
  public final TimePicker timePickerWorkEnd;

  @NonNull
  public final TimePicker timePickerWorkStart;

  private FragmentTimeSettingBinding(@NonNull ScrollView rootView, @NonNull Button btnCancelSetting,
      @NonNull Button btnConfirmSetting, @NonNull EditText etOffMaxInterval,
      @NonNull EditText etOffMinInterval, @NonNull EditText etWorkMaxInterval,
      @NonNull EditText etWorkMinInterval, @NonNull SwitchMaterial switchOffRandomPunch,
      @NonNull SwitchMaterial switchWorkRandomPunch, @NonNull TimePicker timePickerOffEnd,
      @NonNull TimePicker timePickerOffStart, @NonNull TimePicker timePickerWorkEnd,
      @NonNull TimePicker timePickerWorkStart) {
    this.rootView = rootView;
    this.btnCancelSetting = btnCancelSetting;
    this.btnConfirmSetting = btnConfirmSetting;
    this.etOffMaxInterval = etOffMaxInterval;
    this.etOffMinInterval = etOffMinInterval;
    this.etWorkMaxInterval = etWorkMaxInterval;
    this.etWorkMinInterval = etWorkMinInterval;
    this.switchOffRandomPunch = switchOffRandomPunch;
    this.switchWorkRandomPunch = switchWorkRandomPunch;
    this.timePickerOffEnd = timePickerOffEnd;
    this.timePickerOffStart = timePickerOffStart;
    this.timePickerWorkEnd = timePickerWorkEnd;
    this.timePickerWorkStart = timePickerWorkStart;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTimeSettingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTimeSettingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_time_setting, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTimeSettingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_cancel_setting;
      Button btnCancelSetting = ViewBindings.findChildViewById(rootView, id);
      if (btnCancelSetting == null) {
        break missingId;
      }

      id = R.id.btn_confirm_setting;
      Button btnConfirmSetting = ViewBindings.findChildViewById(rootView, id);
      if (btnConfirmSetting == null) {
        break missingId;
      }

      id = R.id.et_off_max_interval;
      EditText etOffMaxInterval = ViewBindings.findChildViewById(rootView, id);
      if (etOffMaxInterval == null) {
        break missingId;
      }

      id = R.id.et_off_min_interval;
      EditText etOffMinInterval = ViewBindings.findChildViewById(rootView, id);
      if (etOffMinInterval == null) {
        break missingId;
      }

      id = R.id.et_work_max_interval;
      EditText etWorkMaxInterval = ViewBindings.findChildViewById(rootView, id);
      if (etWorkMaxInterval == null) {
        break missingId;
      }

      id = R.id.et_work_min_interval;
      EditText etWorkMinInterval = ViewBindings.findChildViewById(rootView, id);
      if (etWorkMinInterval == null) {
        break missingId;
      }

      id = R.id.switch_off_random_punch;
      SwitchMaterial switchOffRandomPunch = ViewBindings.findChildViewById(rootView, id);
      if (switchOffRandomPunch == null) {
        break missingId;
      }

      id = R.id.switch_work_random_punch;
      SwitchMaterial switchWorkRandomPunch = ViewBindings.findChildViewById(rootView, id);
      if (switchWorkRandomPunch == null) {
        break missingId;
      }

      id = R.id.time_picker_off_end;
      TimePicker timePickerOffEnd = ViewBindings.findChildViewById(rootView, id);
      if (timePickerOffEnd == null) {
        break missingId;
      }

      id = R.id.time_picker_off_start;
      TimePicker timePickerOffStart = ViewBindings.findChildViewById(rootView, id);
      if (timePickerOffStart == null) {
        break missingId;
      }

      id = R.id.time_picker_work_end;
      TimePicker timePickerWorkEnd = ViewBindings.findChildViewById(rootView, id);
      if (timePickerWorkEnd == null) {
        break missingId;
      }

      id = R.id.time_picker_work_start;
      TimePicker timePickerWorkStart = ViewBindings.findChildViewById(rootView, id);
      if (timePickerWorkStart == null) {
        break missingId;
      }

      return new FragmentTimeSettingBinding((ScrollView) rootView, btnCancelSetting,
          btnConfirmSetting, etOffMaxInterval, etOffMinInterval, etWorkMaxInterval,
          etWorkMinInterval, switchOffRandomPunch, switchWorkRandomPunch, timePickerOffEnd,
          timePickerOffStart, timePickerWorkEnd, timePickerWorkStart);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
